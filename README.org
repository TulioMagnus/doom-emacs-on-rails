* Index :toc:
- [[#description][Description]]
- [[#prerequisites][Prerequisites]]
- [[#installation][Installation]]
- [[#never-heard-about-emacs-before][Never heard about emacs before?]]
  - [[#history][History]]
  - [[#about-doom-emacs][About Doom Emacs]]
  - [[#what-i-need-to-know-to-start-using-][What i need to know to start using ?]]
- [[#method-generator][Method Generator]]
- [[#configuring-forge-for-creating--reviewing-pull-requests][Configuring Forge for Creating / Reviewing pull requests]]
  - [[#for-github][For github]]
  - [[#for-other-git-server][For other git server]]
- [[#tips][Tips]]
  - [[#search-and-replace-in-whole-project][Search and replace in whole project]]
  - [[#multiple-cursors][Multiple-cursors]]
  - [[#want-to-add-your-own-config][Want to add your own config]]
  - [[#for-js-and-ruby][For JS and Ruby]]
- [[#keybindings-that-i-made-myself][Keybindings that i made myself]]
- [[#using-autocomplete][Using Autocomplete]]
- [[#getting-help][Getting help]]
- [[#enabling-rubocop-integration][Enabling rubocop integration]]
- [[#using-gccemacs-recommended][Using GCCEmacs (recommended)]]
- [[#solargraph][Solargraph]]

* Description
# Personal configuration for doom emacs

+ Working with JS
+ Full functional with Ruby on Rails
+ Some new functions added from vanilla doom emacs.
+ Solargraph for autocompletes (C-p and C-S-p to complete with buffers text)
+ Magit for awesome git usage and pull request creation / review.

* Prerequisites
 - Git 2.23+
 - Emacs 26.1+ (27 is recommended) with GNUTLS support
 - ripgrep 11.0+
 - GNU find
 - OPTIONAL fd 7.3.0+ (improves file indexing performance for some commands)
 - Solargraph =(gem install solargraph)=
 - typescript-language-server =(npm install -g typescript-language-server)=

* Installation
#+BEGIN_SRC shell
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
git clone https://github.com/otavioschwanck/doom_emacs_dotfiles.git ~/.doom.d
~/.emacs.d/bin/doom install
#+END_SRC

* Never heard about emacs before?

** History
Emacs is a text editor designed for POSIX operating systems and available on Linux, BSD, macOS, Windows, and more.
Users love Emacs because it features efficient commands for common but complex actions and for the plugins and configuration hacks that have developed around it for nearly 40 years.

** About Doom Emacs
Doom emacs is a configuration framework built over emacs that brings a package manager and a lot of facilities to build your own emacs configuration.
It also brings the =Evil Mode= implementation, that set the =vim keybindings= in emacs.

** What i need to know to start using ?
I really recommend you to learn the basics of vim first, choose one:

+ [[https://www.udemy.com/course/vim-commands-cheat-sheet/][Vim Udemy Course]] (non-free) (for vim) (3h course) (very good course, i did this) (Very Complete!)
+ [[https://www.youtube.com/watch?v=ER5JYFKkYDg][Vim Tutorial pt 1]] and [[https://www.youtube.com/watch?v=tExTz7GnpdQ][Vim Tutorial pt 2]] (free) (basic)
+ [[https://www.youtube.com/watch?v=H3o4l4GVLW0&list=PLm323Lc7iSW_wuxqmKx_xxNtJC_hJbQ7R][Vim Youtube Course - 6 Videos, ignore the 6]] (free) (basic-intermediary)

After that, you can see the [[https://www.youtube.com/watch?v=rCMh7srOqvw&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj][Doom Casts]] to learn the basics of doom emacs (optional)
Don't forget to see the =evil cheatsheet pt-BR.png= on the root of this repository!

Don'tt forget the [[https://discord.gg/qvGgnVx][Doom Emacs Discord Server]], is always full of people that always helps!
You can get help of any command on doom with SPC h p (function) of SPC h k + keybinding = (to see the options, etc.)

* Method Generator
I've developed a emacs function to generate methods in Ruby files.  To use, just press =C-M-enter=.
If the method name is init, it creates a initialize settings the args on instance variables.

Syntax: method_name@arg_1,arg_2,arg_n;method_two@arg_1,arg_2,arg_n
#+caption: Generate Methods
[[file:generate_method.gif]]

* Configuring Forge for Creating / Reviewing pull requests
** For github
1 - Go to https://github.com/settings/tokens and create a personal token with =repo (all)=, =read:org= and =user=

2 - Don't forget to configure your user in github with git config --global github.user youruser

3 - Create a file called =~/.authinfo=

4 - add =machine api.github.com login youruser^forge password yourtokenhere= and =machine api.github.com login otavioschwanck^github-review password yourtokenhere= to this file

5 - M-x =epa-encrypt-file= and select =~/authinfo= to encrypt with gpg.

6 - delete the =~/.authinfo=

** For other git server
See: https://practicalli.github.io/spacemacs/source-control/forge-configuration.html and https://magit.vc/manual/ghub/Getting-Started.html

* Tips
** Search and replace in whole project
*** Replacing a text
You can search and replace by pressing =SPC s p= to search in project, then, =C-c C-e= to open the search on a buffer.  To replace some word, just run =:%s/old_text/new_text/g=. You also can use the multiple cursors.

*** Renaming multiple files
If you want to also, rename multiple files in project, just run =M-x= =find-dired= and type -name "\*your_class\*.extension" (without the \ (vertical bars)). It will open a dired with all matches in the project.  Just press =C-e C-e= to toggle the edit mode and edit the filenames like a text file!
Press C-c C-c to confirm the edit or C-c C-k to cancel.

** Multiple-cursors
To use multiple-cursors, select the word, then, press =M-d= to go forward or =M-D= to go backwards.  Press =C= to edit all.

** Want to add your own config
Just create and user.el and add your configs there!  You also can create an folder called user/ and put any files there!

Example user.el
#+begin_src elisp
;;; user.el -*- lexical-binding: t; -*-

;; You can see all the themes here: https://github.com/hlissner/emacs-doom-themes/tree/screenshots
(setq doom-theme 'doom-one)

;; You can change the splash art // put on your ~/.doom.d/user/your_splash.png
;; (setq fancy-splash-image (expand-file-name "user/your_splash.png" doom-private-dir))

;; You can change the font here
(setq doom-font (font-spec :family "Fira Code" :size 15 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Fira Code" :size 13))

;; You can change your notes with SPC n d, its VERY COOL! USE IT PLEASE
(after! deft
  (setq deft-directory "~/Documentos"))
#+end_src

** For JS and Ruby
I really recommend you to use ts-ls and Javascript LSP to work with ruby

* Keybindings that i made myself
| Key                 | Mode               | Description                                                |
| SPC a and SPC A     | Ruby               | Go to / create spec file                                   |
| SPC v               | All                | Open terminal on project root                              |
| SPC t t             | All                | Toggle truncate lines                                      |
| SPC -               | All                | Indent the file                                            |
| SPC =               | Ruby               | Runs rubocop -a on current file                            |
| ]g and [g           | All                | Navigate on git changes                                    |
| SPC l               | Terminals          | Clean terminal                                             |
| C-j                 | All                | Go one sentence down (very useful)                         |
| C-k                 | All                | Go one sentence up (very useful)                           |
| TAB                 | All (except org)   | Same as / (search)                                         |
| C-TAB               | All (except org)   | Same as ? (search-backwards)                               |
| C-q                 | All (insert mode)  | Paste on insert mode                                       |
| J and K             | Normal Mode        | Drag stuff down and up                                     |
| C-, and C-;         | Normal Mode        | Previous and Next buffer                                   |
| รง                   | Normal mode        | Save all files                                             |
| SPC gdo and SPC gdm | Git conflict       | Keep other or Keep mine (git)                              |
| SPC e               | All                | Toggle treemacs                                            |
| C-e                 | Insert (web-mode)  | emmet-expand (like ul>li*3)                                |
| C-e                 | Insert (ruby-mode) | emmet-expand (Ruby) (Method generator) (Same as C-M-enter) |
| SPC m i             | normal             | toggle if / unless into single / multi-line                |
| SPC m S             | normal             | split a giant string into strings with \                   |

* Using Autocomplete
#+caption: Autocomplete
[[file:autocomplete.gif]]

On my doom config, i've done several tweaks to the default autocomplete.
Instead of using enter to select the item in the popup, I use TAB.  The Tab can't go down and up in the autocomplete popup.  Instead of tab, i use =C-j= and =C-k=.

| Key     | Command                                                  |
| Tab     | Select the complation                                    |
| C-j     | Go down on the popup                                     |
| C-k     | Go up on the popup                                       |
| C-p     | Select a similar word instantly                          |
| C-S-p   | See the list of similar words                            |
| C-x C-s | See all the snippets                                     |
| C-q     | Toggle snippet / go foward in snippet                    |
| C-d     | (while snipped is active) Delete the highlighted snippet |

* Getting help
For getting help, access doom official github page: https://github.com/hlissner/doom-emacs

* Enabling rubocop integration
In your =~/.doom.d/user.el=, just add:
#+begin_src elisp
(with-eval-after-load 'flycheck
  (setq-default flycheck-disabled-checkers '(ruby-reek ruby-rubylint))) ;; This will remove the rubocop from disabled checkers (and LSP)
#+end_src

* Using GCCEmacs (recommended)

For better performance, i recommend to use the gccemacs version.  To install it, you need to compile.

For Ubuntu:
#+begin_src
sudo apt install libxpm-dev libgif-dev libjpeg-dev libpng-dev libtiff-dev libx11-dev libncurses5-dev automake autoconf texinfo libgtk2.0-dev
sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
sudo apt install gcc-10 g++-10 libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev
git clone git://git.sv.gnu.org/emacs.git
cd emacs
git checkout feature/native-comp
export CC=/usr/bin/gcc-10 CXX=/usr/bin/gcc-10
./autogen.sh
./configure --with-nativecomp --with-json CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer"
make -j2 NATIVE_FULL_AOT=1
sudo make install
#+end_src

* Solargraph
To configure solargraph for the full potential in your project, follow this steps: https://github.com/otavioschwanck/solargraph-rails
